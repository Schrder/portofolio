---
export interface Props {
  title: string;
  sizes: string;
  className: string;
  loading?: "eager" | "lazy";
}

const { title, sizes, loading = "lazy", className } = Astro.props;
const prefix = `${import.meta.env.BASE_URL}assets`;
const widths = [400, 800, 1200, 1600, 2000, 2400];

let srcsetAvif = "";
let srcsetJpeg = "";

widths.forEach((width) => {
  const variationName = `${prefix}/${title}_${width}px`;
  srcsetAvif += `${variationName}.avif ${width}w`;
  srcsetJpeg += `${variationName}.jpeg ${width}w`;
  if (width !== widths[widths.length - 1]) {
    srcsetAvif += ",";
    srcsetJpeg += ",";
  }
});

const fallbackImage = `${prefix}/${title}_800px.jpg`;
---

<style>
  img {
    width: 100%;
    height: 100%;
    object-fit: cover;

    /* Reset initistic image widths for css grid */
    /* Remove intrinsice widths of replacement element */
    min-width: 0;
    min-height: 0;

    border-radius: 8px;
    background-color: var(--variant-2);
    object-position: var(--photo-object-position, 50% 50%);
  }
</style>
<picture class={className}>
  <source type="image/avif" srcset={srcsetAvif} sizes={sizes} />
  <source type="image/jpeg" srcset={srcsetJpeg} sizes={sizes} />
  <img src={fallbackImage} alt={title} loading={loading} id={title} />
</picture>
